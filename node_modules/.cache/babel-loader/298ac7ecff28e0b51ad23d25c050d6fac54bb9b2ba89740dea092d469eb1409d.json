{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Project-Files\\\\appointment-planner-starting-v18\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  /* Define state variables for contact info and duplicate check */\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  const handleNameChange = e => {\n    const newName = e.target.value;\n    setName(newName);\n    setIsDuplicate(contacts.some(contact => contact.name === newName));\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    /* Add contact info and clear data if the contact name is not a duplicate*/\n    if (isDuplicate) {\n      addContact(name, phone, email);\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n  };\n\n  /* Using hooks, check for contact name in the contacts array variable in props */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        phone: phone,\n        email: email,\n        handleNameChange: handleNameChange,\n        handleSubmit: handleSubmit,\n        setPhone: setPhone,\n        setEmail: setEmail,\n        isDuplicate: isDuplicate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"5LBdUdBl5w6okq/UhTjhbF3zuKU=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhone","email","setEmail","isDuplicate","setIsDuplicate","handleNameChange","e","newName","target","value","some","contact","handleSubmit","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Project-Files/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({contacts, addContact}) => {\r\n  /* Define state variables for contact info and duplicate check */\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email , setEmail] = useState('');\r\n  const [isDuplicate, setIsDuplicate] = useState(false)\r\n\r\n  const handleNameChange = (e) => {\r\n    const newName = e.target.value;\r\n    setName(newName);\r\n    setIsDuplicate(contacts.some(contact => contact.name === newName));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /* Add contact info and clear data if the contact name is not a duplicate*/\r\n    if (isDuplicate) {\r\n      addContact(name, phone, email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  /* Using hooks, check for contact name in the contacts array variable in props */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          name={name}\r\n          phone={phone}\r\n          email={email}\r\n          handleNameChange={handleNameChange}\r\n          handleSubmit={handleSubmit}\r\n          setPhone={setPhone}\r\n          setEmail={setEmail}\r\n          isDuplicate={isDuplicate}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA4B;EAAAC,EAAA;EAAA,IAA3B;IAACC,QAAQ;IAAEC;EAAU,CAAC,GAAAH,IAAA;EACjD;EACA,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,KAAK,EAAGC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMmB,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC9BX,OAAO,CAACS,OAAO,CAAC;IAChBH,cAAc,CAACT,QAAQ,CAACe,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACd,IAAI,KAAKU,OAAO,CAAC,CAAC;EACpE,CAAC;EAED,MAAMK,YAAY,GAAIN,CAAC,IAAK;IAC1BA,CAAC,CAACO,cAAc,EAAE;IAClB;IACA,IAAIV,WAAW,EAAE;MACfP,UAAU,CAACC,IAAI,EAAEE,KAAK,EAAEE,KAAK,CAAC;MAC9BH,OAAO,CAAC,EAAE,CAAC;MACXE,QAAQ,CAAC,EAAE,CAAC;MACZE,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;;EAED;;EAEA,oBACEX,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpB3B,OAAA,CAACH,WAAW;QACVS,IAAI,EAAEA,IAAK;QACXE,KAAK,EAAEA,KAAM;QACbE,KAAK,EAAEA,KAAM;QACbI,gBAAgB,EAAEA,gBAAiB;QACnCO,YAAY,EAAEA,YAAa;QAC3BZ,QAAQ,EAAEA,QAAS;QACnBE,QAAQ,EAAEA,QAAS;QACnBC,WAAW,EAAEA;MAAY;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACzB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACM,eACV3B,OAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACN3B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjB3B,OAAA,CAACF,QAAQ;QAAC8B,KAAK,EAAExB;MAAS;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACpB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACxB,EAAA,CAhDWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}